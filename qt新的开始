//1）学习GUI编程，市场上任何一款产品几乎都带图形界面，市场上很火的Android、IOS编程无非也是cur app编程，GUI编程都是差不多，学习Qt后再学习Android、Ios，那是So
//easy。就算不学习Android、IoS，由于Qt跨平台特性，通过qt写的程序可以在Android、Ios平台上运行。
//2）锻炼编程能力，GUI编程比后台编程更能锻炼人，因为你除了核心数据处理外，还需要协调界面，同时懂得前端和后台编程, 才能更好地写好程序。
//3）为了更好地使用C++，学习qt的框架（qt是C++实现的应用程序框架），很多游戏、后台服务器框架都是使用C++实现。
//wps virtual box这些都有qt的痕迹
//如何学习Qt ? Qt帮助文档
//库函数的调用
//strcpy();
//1)功能
//2)参数
//3)返回值
//
//课程安排
// 第一天:(很重要)
//  1.qt介绍
//  2.qt框架
//  3.项目文件(.pro)
//  4.第一个qt程序(hello qt)
//  5.父窗口和子窗口的区别(控件,部件,构件)
//  6.中断信号和槽(这个是重点)
//  7.坐标系统
//  8.内存回收机制 new delete,qt内部有回收系统不过有前提
//  9.带菜单栏的窗口
//  10.对话框
// 
// 第二天:
//  1.Qtcreator界面设计器
//  2.常用空间
//  3.布局
//  4.自定义控件
//  5.常用事件的处理(跟信号和槽有点像)
//
// 第三天:
//  1.Qpainter绘图
//  2.绘图设备(QPixmap,QImage,QBitmap,QPicture)
//  3.文件操作(QFile,QFileInfo,QdataStream,QTextStream,QBuffter)
// 
// 第四天:(先学完网络和多线程编程在学这个)
//  1.tcp编程
//  2.udp编程
//  3.udp传输图片
//  4.多线程编程(多任务)
// 
// 第五天上午:数据库编程简单用qsl语句(可以图形界面)
// 第五天下午-第六天:汽车销售管理系统
//
//qt是一个跨平台图形用户界面应用程序框架(gui编程)把我们要功能封装成一个类
//小提示:linux有两个桌面一个是kde一个是gnome,其中kde是qt写的,qt文件不要有中文路径
//
//基类,派生类
// 头文件,主函数,return xxx
// QtWidgets/QApplication应用程序类
// qt头文件没有.h
// 头文件和类名一样
// 
// 框架就是
//int main(int argc, char *argv[])
//{
//  QApplication a(argc, argv);
// 
//  自己写代码的地方,
// 
//  return a.exec();
//}
//
//文件.pro中需要#注释,还有模块([QT ＋ = core gui]如果不知道选中头文件按f1),当然vs环境下看不见,模块vs可以选中项目->属性->pt project settings->qt modules中设置
//其次是为了兼容qt4兼容而已:greaterThan(QT_MAJOR_VERSION,4): QT+= widgets
//应用程序的名字,把原来的exe文档删了然后在执行就变量:TARGET = mike
//指令makefile的类型,app,也可以生成库lib:TEMPLATE =app
//源文件.cpp:sOURCES += main. cpp l  \n  mywidget.cpp
//头文件.h:HEADERS+=mywidget.h
//
//qt5按模块开分,有
// qt widgets(gui)
// qt webkit(浏览器引擎)
// qt text(测试单元)
// qt sql(数据库单元)
// qt quick(另外的框架用js)
// qt qml(另外的框架js)
// qt mulitmedia widgets(多媒体)
// qt core(内部资本模块,写不写都一样)
// qt gui(内部资本模块,写不写都一样)
// qt network(网络)
// qt mulitmedia(多媒体)
// qt quick controls(另外的框架js)
// qt quick dialogs(另外的框架js)
//

int main(int argc, char *argv[])
{
    //固定框架,有且只有一个应用程序类的对象
    QApplication a(argc, argv);
    
    //qt_day01继承于QWidget,QWidget是一个窗口基类
    //所以qt_day01也是窗口类
    //w就是一个窗口
    qt_day01 w;

    //窗口创建默认是隐藏的,需要认为显示
    w.show();//是显示窗口的注释掉不会显示窗口但程序还在运行
    
    //窗口不会停止,通过循环都是这句话a.exec()的功劳
    return a.exec();//让程序以值执行,等待用户操作,等待事件发生
}
Q_OBJECT//信号与槽的时候会需要到

//实现父子窗口功能
#define _CRT_SECURE_NO_WARNINGS 1
#include <QApplication>
#include <QWidget>//窗口空间基类
#include<QPushbutton>

int main(int argc, char** argv)
{
	QApplication app(argc, argv);

	QWidget w;
	w.setWindowTitle("1234\n");//设置标题

	QPushButton b;
	b.setText("123");
	//创建控件时默认时隐藏的需要手动

	//如果不指定父对象,对象和对象(窗口和窗口)没关系,独立的
	//a执行b为它的父对象,a放在b的上面
	//指定父对象,有两种方式,setParent和通过构造函数传参
	//指定父对象,只需要父对象显示,上面的子对象自动显示
	
	b.setParent(&w);//指定父类
	b.move(100, 100);//移动坐标

	QPushButton b1(&w);//通过构造函数传参
	b1.setText("abc");

	w.show();
	return app.exec();
}

//开始写在类中实现的功能了
#include "my_signalandslot.h"
#include <QtWidgets/QApplication>
int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    My_SignalAndSlot w;//先执My_SignalAndSlot行构造函数
    w.show();

    return a.exec();
}

#pragma once
#include <QtWidgets/QWidget>
#include "ui_my_signalandslot.h"
#include <QPushButton>
#include "subwidget.h"

class My_SignalAndSlot : public QWidget
{
    Q_OBJECT

public:
    My_SignalAndSlot(QWidget *parent = nullptr);
    ~My_SignalAndSlot();
    
    //都是自定义槽函数
public slots:
    void mySlot();
    void changWin();
    void dealSub();
    void dealSub(int, QString);

private:
    Ui::My_SignalAndSlotClass ui;
    QPushButton b1;
    QPushButton* b2;
    QPushButton b3;
    
    subwidget w;
};

#pragma once
#include <QWidget>
#include "ui_subwidget.h"
#include <QPushButton>
#include <QDebug>

class subwidget : public QWidget
{
	Q_OBJECT

public:
	subwidget(QWidget *parent = nullptr);
	~subwidget();
	void sendSlot();

signals:
	// 信号必须有signals关键字来声明
	// 信号没有返回值,但可以有参数
	// 信号就是函数的声明,只需声明,无需定义
	// 使用:emit mySignal();
	// 信号可以重载,函数名一样,参数不同
	
	void mysignal();
	void mysignal(int, QString);

private:
	Ui::subwidgetClass ui;
	QPushButton b;
};


#include "subwidget.h"
subwidget::subwidget(QWidget *parent)
	: QWidget(parent)
{
	ui.setupUi(this);
	this->setWindowTitle("子窗口");
	b.setParent(this);
	b.setText("切换窗口");

	//加一个信号,意思是点击这个b,会给this自己发送一个sendSlot槽,槽里面有信号
	connect(&b, &QPushButton::clicked, this, &subwidget::sendSlot);

	//大小
	resize(400, 300);
}

//槽返回信号
void subwidget::sendSlot()
{
	//发送信号,广播发送,信号是给槽函数传参的,所以槽函数也要有两个
	emit mysignal();
	emit mysignal(250,"我是子窗口");
}

subwidget::~subwidget()
{}

#include "my_signalandslot.h"
My_SignalAndSlot::My_SignalAndSlot(QWidget *parent)
    : QWidget(parent)
{
    ui.setupUi(this);
    b1.setParent(this);
    b1.setText("123");
    b1.move(100,100);

    b2 = new QPushButton(this);
    b2->setText("abc");

    //&b1 信号发出者,指针类型.
    //&QPushButton::pressed 处理的信号, &发送者的类名::信号名字
    //this 信号接收者
    //&My_SignalAndSlot::close 槽函数,信号处理函数 &接收的类名::槽函数名字
    connect(&b1, &QPushButton::pressed, this, &My_SignalAndSlot::close);
    //意思就是,connect是关键字,谁发出的,发送者有类吧::然后找到要和处理的信号,谁接收,接收者的类::槽函数名字
    //connect可以理解成,信号来了就调用某某槽函数,参数都是指针类型
    //信号与槽是:qt对象之间通信的接口

    //自定义槽,普通函数的用法
    // qt5:任意的成员函数,普通全局函数,静态函数
    // 槽函数需要和信号一致(参数,返回值)
    // 由于信号都是没有返回值,所以,槽函数一定没有返回值
    //
    connect(b2, &QPushButton::released, this, &My_SignalAndSlot::mySlot);
    connect(b2, &QPushButton::released, &b1, &My_SignalAndSlot::hide);
    //信号:短信
    //槽函数:接收短信的手机

    this->setWindowTitle("老大");
    b3.setParent(this);
    b3.setText("切换");
    b3.move(50, 50);

    //显示子窗口,关闭主窗口
    //w.show();
    connect(&b3, &QPushButton::released, this, &My_SignalAndSlot::changWin);

    //接收子窗口传来的信号,是子类的槽传过来的信号
    //这样写会出现二义性,需要函数指针来帮忙
    //void (subwidget:: * funSignal)() = &subwidget::mysignal;
    //void (subwidget:: * textSignal)(int, QString) = &subwidget::mysignal;
    //void (My_SignalAndSlot::*dealSub1)() = &My_SignalAndSlot::dealSub;
    //void (My_SignalAndSlot::*dealSlot1)(int, QString) = &My_SignalAndSlot::dealSub;

    //connect(&w, funSignal, this, dealSub1);
    //connect(&w, textSignal, this, dealSlot1);

    //qt4的connect,槽函数必须有slots来修饰
    connect(&w, SIGNAL(mysignal()), this, SLOT(dealSub()));
    connect(&w, SIGNAL(mysignal(int, QString)), this, SLOT(dealSub(int, QString)));
    //但这种有两个致命缺点,一点是SIGNAL SLOT 将函数名->字符串 不进行错误检查,也就是你把函数名写错不报错,在运行阶段才报错,第二就是slots关键字修饰

    //lambda表达式,匿名函数对象
    //c++11在增加的新特性 项目文件:CONFIG += c++11
    //qt配合信号一起使用,非常方便
    //方便去不用定义槽函数,不用指定信号接收
    QPushButton * b4 = new QPushButton(this);
    b4->setText("lambda表达式");
    b4->move(150, 150);
    int a = 10, b = 20;//事实证明加上static可以解决&传进去的问题
    connect(b4, &QPushButton::clicked,
        //=:把外部所有局部变量,类中所有成员以值传递方式传进来
        //this:类中所有成员以值传递方式传进来
        //&:把外部所有局部变量以址方式传进来,引用符号(如果是动态分配空间的不要用引用,原因:运行代码后，main函数创建完主窗口还没点任何按钮的时候，实际上是已经完成了主窗口的构造，自动将构造函数里所有局部变量释放掉，引用传递是将另一个指针指向a和b指向的值，但是此时这个地方的值已经被释放,所以会有随机值产生,加static就行了)
        [&](bool ischeck) mutable //这个mutable关键字就可以修改传进来的值了
        {
            qDebug() << "1111111";
            qDebug() << a << b;
            qDebug() << ischeck << endl;
        }
        //解释一下,这个是什么东西,()和{}是参数和函数体,这个知道吧,那[]是一个传进来的参数或者写个=也就是所有局部变量和类中所有成员,以值传递的形式传进来,但有个局限性传进来的数据只能读
        //所以最好用=号来,()这个是根据信号来的,要和信号所对应.
        //问,信号是谁发出来的,是窗口还是按钮?
        //信号是谁的(有emit修饰的函数如:emit mysignal();),他就是谁发出来,所以是窗口发出来的,不是按钮,按钮只是触发中断从而发送信号它目的是调用槽函数而已
    );


    //大小
    resize(400, 300);
}

void My_SignalAndSlot::mySlot()
{
    b2->setText("234");
}

void My_SignalAndSlot::changWin()
{
    //子窗口显示
    w.show();
    //本窗口隐藏
    this->hide();
}

void My_SignalAndSlot::dealSub()
{
    //子窗口隐藏
    w.hide();
    //本窗口显示
    show();
}

void My_SignalAndSlot::dealSub(int a,QString str)
{
    //str.toutf8->字节数组QByteArray
    //data() -> QByteArray -> char*
    qDebug() << a << str.toUtf8().data() << endl;
}

My_SignalAndSlot::~My_SignalAndSlot()
{}

04坐标
#include "my_qt_xy.h"
#include <QtWidgets/QApplication>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    my_QT_XY w;
    w.show();
    return a.exec();
}


#pragma once

#include <QtWidgets/QWidget>
#include "ui_my_qt_xy.h"
#include <QPushButton>
#include "MyButton.h"

class my_QT_XY : public QWidget
{
    Q_OBJECT

public:
    my_QT_XY(QWidget *parent = nullptr);
    ~my_QT_XY();

private:
    Ui::my_QT_XYClass ui;
};


#pragma once

#include <QPushButton>
#include <QDebug>

//根据参数列表给基类构造函数传参
class MyButton  : public QPushButton
{
	Q_OBJECT

public:
	MyButton(QWidget *parent);
	~MyButton();
};


///////////////////////////////////////////////////////////
#include "my_qt_xy.h"

my_QT_XY::my_QT_XY(QWidget *parent)
    : QWidget(parent)
{
    ui.setupUi(this);
    //坐标系统
    //对于父窗口(主窗口),坐标系统相对于屏幕
    //原点:相对于屏幕左上角(不包括边框)
    // x
    // y
    move(100, 100);
    QPushButton* b1 = new QPushButton(this);
    b1->move(100, 100);
    b1->setText("^_^");
    b1->resize(100, 100);

    QPushButton* b2 = new QPushButton(b1);
    b2->move(10, 10);
    b2->setText("QAQ");

    //对象树,有个前提条件是继承于qobject
    //当我程序结束的时候他会自动回收,只要我们指定父对象,结束的时候会按照先释放子对象,在释放父对象,类似树的后序遍历
    MyButton* b3 = new MyButton(this);
    b3->setText("123");
    //指定父对象后,直接或间接继承于QObject
    //子对象如果是动态分配空间的new,不需要手动释放delete,系统就会自动释放
    //意思是主窗口有个析构函数，这里会析构掉所有子类在堆区的内存
    //new之后就需要自己使用delete来释放c++不会,如果以直new的话和ide怎么处理,一般情况下vs2019在这个程序new内存空间达到4G就会自动中断
}

my_QT_XY::~my_QT_XY()
{}


#include "MyButton.h"

MyButton::MyButton(QWidget *parent)
	: QPushButton(parent)
{}

MyButton::~MyButton()
{
	qDebug() << "an_niu_bei_xi_gou";
}
